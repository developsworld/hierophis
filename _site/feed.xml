<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-29T23:31:02+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Hierophis</title><subtitle>아나콘다가 되고 싶은 실뱀의 고군분투 개발자 성장 로그</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/free/2019/10/27/test.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2019-10-27T13:51:01+09:00</published><updated>2019-10-27T13:51:01+09:00</updated><id>http://localhost:4000/free/2019/10/27/test</id><content type="html" xml:base="http://localhost:4000/free/2019/10/27/test.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">domain sharding &amp;gt; SPDY &amp;gt; HTTP/2</title><link href="http://localhost:4000/server/java/2018/05/10/tech-report-000.html" rel="alternate" type="text/html" title="domain sharding &gt; SPDY &gt; HTTP/2 " /><published>2018-05-10T00:00:00+09:00</published><updated>2018-05-10T00:00:00+09:00</updated><id>http://localhost:4000/server/java/2018/05/10/tech-report-000</id><content type="html" xml:base="http://localhost:4000/server/java/2018/05/10/tech-report-000.html">&lt;p&gt;웹사이트 성능 과 관련한 글들을 찾아보다가 도메인 샤딩이라는 단어를 발견하였다.&lt;/p&gt;

&lt;p&gt;샤딩은 사실 도메인 샤딩이라는 내용보다는 데이터 베이스 이용 시 성능 향상을 위해서 사용하는 말로 보인다.
shard라는 것이 그냥 직역하면 조각인데&lt;br /&gt;
하나의 데이터 베이스에서 대량의 데이터를 저장 및 조회 할때  성능을 높이기 위한 방식으로 샤딩~ 이라는 애가 나온것 같다. (파티셔닝같은건가…)
샤딩하는 전략에 따라 데이터를 수평분할 한다고 이해해도 될것 같다.
지금 개발 하는 앱에서도 데이터가 많은 테이블에서 조회를 해서인지 조회 할때 조회기간이 3개월만 넘어가도 버벅되는 현상이 있어서 조회 기간을 3개월을 넘지 못하도록 수정해야 했었다.&lt;br /&gt;
여기서 샤딩을 한다면 뭐 이름이나 **번호에 따라 테이블을 다르게 나누고 조회 할 수 있지 않을까 하는 생각이 든다.
 데이터의 샤딩에 대한 내용은 원래 목적 한 바가 아니니.. 이쯤에서 넘어가야겠다.&lt;/p&gt;

&lt;p&gt;그렇다면 도메인 샤딩이란 무엇일까?&lt;/p&gt;

&lt;p&gt;브라우저가 한번에 하나의 도메인에서 내려받을 수 있는 리소스는 유한하다. (참고: http://www.browserscope.org/?category=network&amp;amp;v=top )&lt;/p&gt;

&lt;p&gt;한개의 도메인에서 한번에 최대 6 개의 리소스를 받을 수 있다면, 총 30개의 리소스를 받기 위해서는 5번의 요청을 해야 한다.&lt;br /&gt;
  6개의 리소스를 다운받을때 페이지를 로드하는 시간이 t 인경우 페이지 로딩시간이 그냥 단순하게 계산해서 5t가 되는 것이다.
이런 제한을 해결하기 위해서 개발자는 여러 하위 도메인에 컨텐츠를 분리 할 수 있는데 이걸 도메인 샤딩이라고 한다&lt;/p&gt;

&lt;p&gt;하지만 또 너무 많은 도메인을 추가하면 웹 브라우저가 도메인에서 dns 조회를 수행해야 하고 connection을 유지 해야 하므로 추가 로드 시간이 길어지기 때문에 도메인을 적절하게 추가해야 한다.  (과유불급이라 하였다~)&lt;/p&gt;

&lt;p&gt;하지만 이러한 도메인 샤딩은 오래된 브라우저의 성능 향상을 위해 사용된다.&lt;/p&gt;

&lt;p&gt;그 이유는 google에서 &lt;em&gt;SPDY 프로토콜&lt;/em&gt; 을 발표 했기 때문이다. (역시.. 갓google)&lt;/p&gt;

&lt;p&gt;SPDY 프로토콜은 웹 성능 향상을 위해  세션을 통과하면서 데이터를 일부 수정해서 대역폭 사용을 최적화 한다. (로딩시간이 줄어들고 대역폭 사용량이 감소한다. 이로 인해 고객 만족도는 올라가고 COST는 내려간다.)&lt;/p&gt;

&lt;p&gt;SPDY는 아래의 HTTP의 문제점을 해결한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;HTTP는 하나의 연결에 하나만 요청이 가능하다.
  -&amp;gt; 그렇기 때문에 지연이 발생하고 대역폭을 충분히 활용할 수 없다. SPDY는 동시 다운로드를 허용한다.&lt;/li&gt;
  &lt;li&gt;HTTP를 사용하기 위해서는 &lt;em&gt;클라이언트&lt;/em&gt; 가 서버에 콘텐츠를 요청해야 한다.&lt;br /&gt;
  -&amp;gt; SPDY를 사용하면 서버가 요청을 기다리지 않고 데이터를 클라이언트에 밀어넣을 수 있다.&lt;/li&gt;
  &lt;li&gt;HTTP의 경우 경우에따라 동일한 헤더가 세션중에 반복 될 수 있다.
  -&amp;gt; SPDY는 불필요한 헤더를 제거하여 필요한 대역폭의 양을 줄인다.&lt;/li&gt;
  &lt;li&gt;압축되지 않은 데이터
  -&amp;gt; HTTP에서는 데이터 압축이 선택 사항이지만 SPDY의 경우 헤더를 포함한 모든 통신에 압축을 강제한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;SPDY 프로토콜의 이용으로 속도가 이전에 상당히 향상 되었지만 더 빠른 웹에대한 열망을 잠재우지 못했다.&lt;/p&gt;

&lt;p&gt;그래서 나온것이 HTTP/2(현재) 이다.  (SPDY는 비표준 프로토콜이지만 HTTP/2는 표준 프로토콜이다. )
(참조:  하이퍼 텍스트 전송 프로토콜 버전 2 https://tools.ietf.org/html/draft-ietf-httpbis-http2-16#section-4 )&lt;/p&gt;

&lt;p&gt;HTTP/2의 목표&lt;/p&gt;

&lt;p&gt;클라이언트와 서버가 HTTP 1.1, 2.0 또는 잠재적으로 다른 비 HTTP 프로토콜을 사용하도록 선택할 수있는 협상 메커니즘을 만든다&lt;br /&gt;
HTTP 1.1과의 높은 수준의 호환성 유지 (예 : 메서드 , 상태 코드 , URI 및 대부분의 헤더 필드 포함 ).
다음 을 고려 하여 대기 시간 을 줄여 웹 브라우저의 페이지로드 속도를 향상&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP 헤더 의 데이터 압축&lt;/li&gt;
  &lt;li&gt;HTTP / 2 서버 푸시&lt;/li&gt;
  &lt;li&gt;요청의 파이프 라이닝 (TCP 연결에서 응답을 기다리지 않고 HTTP 요청을 보내는 기술 )&lt;/li&gt;
  &lt;li&gt;HTTP 1.x에서 head-of-line 블로킹(한 줄의 패킷 이 첫 번째 패킷에 고정 될 때 발생하는 성능 제한 현상) 문제 수정&lt;/li&gt;
  &lt;li&gt;다중 TCP의 연결
데스크톱 웹 브라우저, 모바일 웹 브라우저, 웹 API, 다양한 규모의 웹 서버 , 프록시 서버 , 역방향 프록시 서버, 방화벽 및 컨텐츠 전달 네트워크 와 같은 HTTP의 공통된 기존 사용 사례를 지원한다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="etc" /><category term="home" /><summary type="html">웹사이트 성능 과 관련한 글들을 찾아보다가 도메인 샤딩이라는 단어를 발견하였다.</summary></entry><entry><title type="html">domain sharding &amp;gt; SPDY &amp;gt; HTTP/2</title><link href="http://localhost:4000/server/java/2018/05/10/tech-report-001.html" rel="alternate" type="text/html" title="domain sharding &gt; SPDY &gt; HTTP/2 " /><published>2018-05-10T00:00:00+09:00</published><updated>2018-05-10T00:00:00+09:00</updated><id>http://localhost:4000/server/java/2018/05/10/tech-report-001</id><content type="html" xml:base="http://localhost:4000/server/java/2018/05/10/tech-report-001.html">&lt;p&gt;웹사이트 성능 과 관련한 글들을 찾아보다가 도메인 샤딩이라는 단어를 발견하였다.&lt;/p&gt;

&lt;p&gt;샤딩은 사실 도메인 샤딩이라는 내용보다는 데이터 베이스 이용 시 성능 향상을 위해서 사용하는 말로 보인다.
shard라는 것이 그냥 직역하면 조각인데&lt;br /&gt;
하나의 데이터 베이스에서 대량의 데이터를 저장 및 조회 할때  성능을 높이기 위한 방식으로 샤딩~ 이라는 애가 나온것 같다. (파티셔닝같은건가…)
샤딩하는 전략에 따라 데이터를 수평분할 한다고 이해해도 될것 같다.
지금 개발 하는 앱에서도 데이터가 많은 테이블에서 조회를 해서인지 조회 할때 조회기간이 3개월만 넘어가도 버벅되는 현상이 있어서 조회 기간을 3개월을 넘지 못하도록 수정해야 했었다.&lt;br /&gt;
여기서 샤딩을 한다면 뭐 이름이나 **번호에 따라 테이블을 다르게 나누고 조회 할 수 있지 않을까 하는 생각이 든다.
 데이터의 샤딩에 대한 내용은 원래 목적 한 바가 아니니.. 이쯤에서 넘어가야겠다.&lt;/p&gt;

&lt;p&gt;그렇다면 도메인 샤딩이란 무엇일까?&lt;/p&gt;

&lt;p&gt;브라우저가 한번에 하나의 도메인에서 내려받을 수 있는 리소스는 유한하다. (참고: http://www.browserscope.org/?category=network&amp;amp;v=top )&lt;/p&gt;

&lt;p&gt;한개의 도메인에서 한번에 최대 6 개의 리소스를 받을 수 있다면, 총 30개의 리소스를 받기 위해서는 5번의 요청을 해야 한다.&lt;br /&gt;
  6개의 리소스를 다운받을때 페이지를 로드하는 시간이 t 인경우 페이지 로딩시간이 그냥 단순하게 계산해서 5t가 되는 것이다.
이런 제한을 해결하기 위해서 개발자는 여러 하위 도메인에 컨텐츠를 분리 할 수 있는데 이걸 도메인 샤딩이라고 한다&lt;/p&gt;

&lt;p&gt;하지만 또 너무 많은 도메인을 추가하면 웹 브라우저가 도메인에서 dns 조회를 수행해야 하고 connection을 유지 해야 하므로 추가 로드 시간이 길어지기 때문에 도메인을 적절하게 추가해야 한다.  (과유불급이라 하였다~)&lt;/p&gt;

&lt;p&gt;하지만 이러한 도메인 샤딩은 오래된 브라우저의 성능 향상을 위해 사용된다.&lt;/p&gt;

&lt;p&gt;그 이유는 google에서 &lt;em&gt;SPDY 프로토콜&lt;/em&gt; 을 발표 했기 때문이다. (역시.. 갓google)&lt;/p&gt;

&lt;p&gt;SPDY 프로토콜은 웹 성능 향상을 위해  세션을 통과하면서 데이터를 일부 수정해서 대역폭 사용을 최적화 한다. (로딩시간이 줄어들고 대역폭 사용량이 감소한다. 이로 인해 고객 만족도는 올라가고 COST는 내려간다.)&lt;/p&gt;

&lt;p&gt;SPDY는 아래의 HTTP의 문제점을 해결한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;HTTP는 하나의 연결에 하나만 요청이 가능하다.
  -&amp;gt; 그렇기 때문에 지연이 발생하고 대역폭을 충분히 활용할 수 없다. SPDY는 동시 다운로드를 허용한다.&lt;/li&gt;
  &lt;li&gt;HTTP를 사용하기 위해서는 &lt;em&gt;클라이언트&lt;/em&gt; 가 서버에 콘텐츠를 요청해야 한다.&lt;br /&gt;
  -&amp;gt; SPDY를 사용하면 서버가 요청을 기다리지 않고 데이터를 클라이언트에 밀어넣을 수 있다.&lt;/li&gt;
  &lt;li&gt;HTTP의 경우 경우에따라 동일한 헤더가 세션중에 반복 될 수 있다.
  -&amp;gt; SPDY는 불필요한 헤더를 제거하여 필요한 대역폭의 양을 줄인다.&lt;/li&gt;
  &lt;li&gt;압축되지 않은 데이터
  -&amp;gt; HTTP에서는 데이터 압축이 선택 사항이지만 SPDY의 경우 헤더를 포함한 모든 통신에 압축을 강제한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;SPDY 프로토콜의 이용으로 속도가 이전에 상당히 향상 되었지만 더 빠른 웹에대한 열망을 잠재우지 못했다.&lt;/p&gt;

&lt;p&gt;그래서 나온것이 HTTP/2(현재) 이다.  (SPDY는 비표준 프로토콜이지만 HTTP/2는 표준 프로토콜이다. )
(참조:  하이퍼 텍스트 전송 프로토콜 버전 2 https://tools.ietf.org/html/draft-ietf-httpbis-http2-16#section-4 )&lt;/p&gt;

&lt;p&gt;HTTP/2의 목표&lt;/p&gt;

&lt;p&gt;클라이언트와 서버가 HTTP 1.1, 2.0 또는 잠재적으로 다른 비 HTTP 프로토콜을 사용하도록 선택할 수있는 협상 메커니즘을 만든다&lt;br /&gt;
HTTP 1.1과의 높은 수준의 호환성 유지 (예 : 메서드 , 상태 코드 , URI 및 대부분의 헤더 필드 포함 ).
다음 을 고려 하여 대기 시간 을 줄여 웹 브라우저의 페이지로드 속도를 향상&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP 헤더 의 데이터 압축&lt;/li&gt;
  &lt;li&gt;HTTP / 2 서버 푸시&lt;/li&gt;
  &lt;li&gt;요청의 파이프 라이닝 (TCP 연결에서 응답을 기다리지 않고 HTTP 요청을 보내는 기술 )&lt;/li&gt;
  &lt;li&gt;HTTP 1.x에서 head-of-line 블로킹(한 줄의 패킷 이 첫 번째 패킷에 고정 될 때 발생하는 성능 제한 현상) 문제 수정&lt;/li&gt;
  &lt;li&gt;다중 TCP의 연결
데스크톱 웹 브라우저, 모바일 웹 브라우저, 웹 API, 다양한 규모의 웹 서버 , 프록시 서버 , 역방향 프록시 서버, 방화벽 및 컨텐츠 전달 네트워크 와 같은 HTTP의 공통된 기존 사용 사례를 지원한다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="etc" /><category term="home" /><summary type="html">웹사이트 성능 과 관련한 글들을 찾아보다가 도메인 샤딩이라는 단어를 발견하였다.</summary></entry><entry><title type="html">domain sharding &amp;gt; SPDY &amp;gt; HTTP/2</title><link href="http://localhost:4000/server/java/2018/05/10/tech-report-002.html" rel="alternate" type="text/html" title="domain sharding &gt; SPDY &gt; HTTP/2 " /><published>2018-05-10T00:00:00+09:00</published><updated>2018-05-10T00:00:00+09:00</updated><id>http://localhost:4000/server/java/2018/05/10/tech-report-002</id><content type="html" xml:base="http://localhost:4000/server/java/2018/05/10/tech-report-002.html">&lt;p&gt;웹사이트 성능 과 관련한 글들을 찾아보다가 도메인 샤딩이라는 단어를 발견하였다.&lt;/p&gt;

&lt;p&gt;샤딩은 사실 도메인 샤딩이라는 내용보다는 데이터 베이스 이용 시 성능 향상을 위해서 사용하는 말로 보인다.
shard라는 것이 그냥 직역하면 조각인데&lt;br /&gt;
하나의 데이터 베이스에서 대량의 데이터를 저장 및 조회 할때  성능을 높이기 위한 방식으로 샤딩~ 이라는 애가 나온것 같다. (파티셔닝같은건가…)
샤딩하는 전략에 따라 데이터를 수평분할 한다고 이해해도 될것 같다.
지금 개발 하는 앱에서도 데이터가 많은 테이블에서 조회를 해서인지 조회 할때 조회기간이 3개월만 넘어가도 버벅되는 현상이 있어서 조회 기간을 3개월을 넘지 못하도록 수정해야 했었다.&lt;br /&gt;
여기서 샤딩을 한다면 뭐 이름이나 **번호에 따라 테이블을 다르게 나누고 조회 할 수 있지 않을까 하는 생각이 든다.
 데이터의 샤딩에 대한 내용은 원래 목적 한 바가 아니니.. 이쯤에서 넘어가야겠다.&lt;/p&gt;

&lt;p&gt;그렇다면 도메인 샤딩이란 무엇일까?&lt;/p&gt;

&lt;p&gt;브라우저가 한번에 하나의 도메인에서 내려받을 수 있는 리소스는 유한하다. (참고: http://www.browserscope.org/?category=network&amp;amp;v=top )&lt;/p&gt;

&lt;p&gt;한개의 도메인에서 한번에 최대 6 개의 리소스를 받을 수 있다면, 총 30개의 리소스를 받기 위해서는 5번의 요청을 해야 한다.&lt;br /&gt;
  6개의 리소스를 다운받을때 페이지를 로드하는 시간이 t 인경우 페이지 로딩시간이 그냥 단순하게 계산해서 5t가 되는 것이다.
이런 제한을 해결하기 위해서 개발자는 여러 하위 도메인에 컨텐츠를 분리 할 수 있는데 이걸 도메인 샤딩이라고 한다&lt;/p&gt;

&lt;p&gt;하지만 또 너무 많은 도메인을 추가하면 웹 브라우저가 도메인에서 dns 조회를 수행해야 하고 connection을 유지 해야 하므로 추가 로드 시간이 길어지기 때문에 도메인을 적절하게 추가해야 한다.  (과유불급이라 하였다~)&lt;/p&gt;

&lt;p&gt;하지만 이러한 도메인 샤딩은 오래된 브라우저의 성능 향상을 위해 사용된다.&lt;/p&gt;

&lt;p&gt;그 이유는 google에서 &lt;em&gt;SPDY 프로토콜&lt;/em&gt; 을 발표 했기 때문이다. (역시.. 갓google)&lt;/p&gt;

&lt;p&gt;SPDY 프로토콜은 웹 성능 향상을 위해  세션을 통과하면서 데이터를 일부 수정해서 대역폭 사용을 최적화 한다. (로딩시간이 줄어들고 대역폭 사용량이 감소한다. 이로 인해 고객 만족도는 올라가고 COST는 내려간다.)&lt;/p&gt;

&lt;p&gt;SPDY는 아래의 HTTP의 문제점을 해결한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;HTTP는 하나의 연결에 하나만 요청이 가능하다.
  -&amp;gt; 그렇기 때문에 지연이 발생하고 대역폭을 충분히 활용할 수 없다. SPDY는 동시 다운로드를 허용한다.&lt;/li&gt;
  &lt;li&gt;HTTP를 사용하기 위해서는 &lt;em&gt;클라이언트&lt;/em&gt; 가 서버에 콘텐츠를 요청해야 한다.&lt;br /&gt;
  -&amp;gt; SPDY를 사용하면 서버가 요청을 기다리지 않고 데이터를 클라이언트에 밀어넣을 수 있다.&lt;/li&gt;
  &lt;li&gt;HTTP의 경우 경우에따라 동일한 헤더가 세션중에 반복 될 수 있다.
  -&amp;gt; SPDY는 불필요한 헤더를 제거하여 필요한 대역폭의 양을 줄인다.&lt;/li&gt;
  &lt;li&gt;압축되지 않은 데이터
  -&amp;gt; HTTP에서는 데이터 압축이 선택 사항이지만 SPDY의 경우 헤더를 포함한 모든 통신에 압축을 강제한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;SPDY 프로토콜의 이용으로 속도가 이전에 상당히 향상 되었지만 더 빠른 웹에대한 열망을 잠재우지 못했다.&lt;/p&gt;

&lt;p&gt;그래서 나온것이 HTTP/2(현재) 이다.  (SPDY는 비표준 프로토콜이지만 HTTP/2는 표준 프로토콜이다. )
(참조:  하이퍼 텍스트 전송 프로토콜 버전 2 https://tools.ietf.org/html/draft-ietf-httpbis-http2-16#section-4 )&lt;/p&gt;

&lt;p&gt;HTTP/2의 목표&lt;/p&gt;

&lt;p&gt;클라이언트와 서버가 HTTP 1.1, 2.0 또는 잠재적으로 다른 비 HTTP 프로토콜을 사용하도록 선택할 수있는 협상 메커니즘을 만든다&lt;br /&gt;
HTTP 1.1과의 높은 수준의 호환성 유지 (예 : 메서드 , 상태 코드 , URI 및 대부분의 헤더 필드 포함 ).
다음 을 고려 하여 대기 시간 을 줄여 웹 브라우저의 페이지로드 속도를 향상&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP 헤더 의 데이터 압축&lt;/li&gt;
  &lt;li&gt;HTTP / 2 서버 푸시&lt;/li&gt;
  &lt;li&gt;요청의 파이프 라이닝 (TCP 연결에서 응답을 기다리지 않고 HTTP 요청을 보내는 기술 )&lt;/li&gt;
  &lt;li&gt;HTTP 1.x에서 head-of-line 블로킹(한 줄의 패킷 이 첫 번째 패킷에 고정 될 때 발생하는 성능 제한 현상) 문제 수정&lt;/li&gt;
  &lt;li&gt;다중 TCP의 연결
데스크톱 웹 브라우저, 모바일 웹 브라우저, 웹 API, 다양한 규모의 웹 서버 , 프록시 서버 , 역방향 프록시 서버, 방화벽 및 컨텐츠 전달 네트워크 와 같은 HTTP의 공통된 기존 사용 사례를 지원한다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="etc" /><category term="home" /><summary type="html">웹사이트 성능 과 관련한 글들을 찾아보다가 도메인 샤딩이라는 단어를 발견하였다.</summary></entry><entry><title type="html">domain sharding &amp;gt; SPDY &amp;gt; HTTP/2</title><link href="http://localhost:4000/server/java/2018/05/10/tech-report-005.html" rel="alternate" type="text/html" title="domain sharding &gt; SPDY &gt; HTTP/2 " /><published>2018-05-10T00:00:00+09:00</published><updated>2018-05-10T00:00:00+09:00</updated><id>http://localhost:4000/server/java/2018/05/10/tech-report-005</id><content type="html" xml:base="http://localhost:4000/server/java/2018/05/10/tech-report-005.html">&lt;p&gt;웹사이트 성능 과 관련한 글들을 찾아보다가 도메인 샤딩이라는 단어를 발견하였다.&lt;/p&gt;

&lt;p&gt;샤딩은 사실 도메인 샤딩이라는 내용보다는 데이터 베이스 이용 시 성능 향상을 위해서 사용하는 말로 보인다.
shard라는 것이 그냥 직역하면 조각인데&lt;br /&gt;
하나의 데이터 베이스에서 대량의 데이터를 저장 및 조회 할때  성능을 높이기 위한 방식으로 샤딩~ 이라는 애가 나온것 같다. (파티셔닝같은건가…)
샤딩하는 전략에 따라 데이터를 수평분할 한다고 이해해도 될것 같다.
지금 개발 하는 앱에서도 데이터가 많은 테이블에서 조회를 해서인지 조회 할때 조회기간이 3개월만 넘어가도 버벅되는 현상이 있어서 조회 기간을 3개월을 넘지 못하도록 수정해야 했었다.&lt;br /&gt;
여기서 샤딩을 한다면 뭐 이름이나 **번호에 따라 테이블을 다르게 나누고 조회 할 수 있지 않을까 하는 생각이 든다.
 데이터의 샤딩에 대한 내용은 원래 목적 한 바가 아니니.. 이쯤에서 넘어가야겠다.&lt;/p&gt;

&lt;p&gt;그렇다면 도메인 샤딩이란 무엇일까?&lt;/p&gt;

&lt;p&gt;브라우저가 한번에 하나의 도메인에서 내려받을 수 있는 리소스는 유한하다. (참고: http://www.browserscope.org/?category=network&amp;amp;v=top )&lt;/p&gt;

&lt;p&gt;한개의 도메인에서 한번에 최대 6 개의 리소스를 받을 수 있다면, 총 30개의 리소스를 받기 위해서는 5번의 요청을 해야 한다.&lt;br /&gt;
  6개의 리소스를 다운받을때 페이지를 로드하는 시간이 t 인경우 페이지 로딩시간이 그냥 단순하게 계산해서 5t가 되는 것이다.
이런 제한을 해결하기 위해서 개발자는 여러 하위 도메인에 컨텐츠를 분리 할 수 있는데 이걸 도메인 샤딩이라고 한다&lt;/p&gt;

&lt;p&gt;하지만 또 너무 많은 도메인을 추가하면 웹 브라우저가 도메인에서 dns 조회를 수행해야 하고 connection을 유지 해야 하므로 추가 로드 시간이 길어지기 때문에 도메인을 적절하게 추가해야 한다.  (과유불급이라 하였다~)&lt;/p&gt;

&lt;p&gt;하지만 이러한 도메인 샤딩은 오래된 브라우저의 성능 향상을 위해 사용된다.&lt;/p&gt;

&lt;p&gt;그 이유는 google에서 &lt;em&gt;SPDY 프로토콜&lt;/em&gt; 을 발표 했기 때문이다. (역시.. 갓google)&lt;/p&gt;

&lt;p&gt;SPDY 프로토콜은 웹 성능 향상을 위해  세션을 통과하면서 데이터를 일부 수정해서 대역폭 사용을 최적화 한다. (로딩시간이 줄어들고 대역폭 사용량이 감소한다. 이로 인해 고객 만족도는 올라가고 COST는 내려간다.)&lt;/p&gt;

&lt;p&gt;SPDY는 아래의 HTTP의 문제점을 해결한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;HTTP는 하나의 연결에 하나만 요청이 가능하다.
  -&amp;gt; 그렇기 때문에 지연이 발생하고 대역폭을 충분히 활용할 수 없다. SPDY는 동시 다운로드를 허용한다.&lt;/li&gt;
  &lt;li&gt;HTTP를 사용하기 위해서는 &lt;em&gt;클라이언트&lt;/em&gt; 가 서버에 콘텐츠를 요청해야 한다.&lt;br /&gt;
  -&amp;gt; SPDY를 사용하면 서버가 요청을 기다리지 않고 데이터를 클라이언트에 밀어넣을 수 있다.&lt;/li&gt;
  &lt;li&gt;HTTP의 경우 경우에따라 동일한 헤더가 세션중에 반복 될 수 있다.
  -&amp;gt; SPDY는 불필요한 헤더를 제거하여 필요한 대역폭의 양을 줄인다.&lt;/li&gt;
  &lt;li&gt;압축되지 않은 데이터
  -&amp;gt; HTTP에서는 데이터 압축이 선택 사항이지만 SPDY의 경우 헤더를 포함한 모든 통신에 압축을 강제한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;SPDY 프로토콜의 이용으로 속도가 이전에 상당히 향상 되었지만 더 빠른 웹에대한 열망을 잠재우지 못했다.&lt;/p&gt;

&lt;p&gt;그래서 나온것이 HTTP/2(현재) 이다.  (SPDY는 비표준 프로토콜이지만 HTTP/2는 표준 프로토콜이다. )
(참조:  하이퍼 텍스트 전송 프로토콜 버전 2 https://tools.ietf.org/html/draft-ietf-httpbis-http2-16#section-4 )&lt;/p&gt;

&lt;p&gt;HTTP/2의 목표&lt;/p&gt;

&lt;p&gt;클라이언트와 서버가 HTTP 1.1, 2.0 또는 잠재적으로 다른 비 HTTP 프로토콜을 사용하도록 선택할 수있는 협상 메커니즘을 만든다&lt;br /&gt;
HTTP 1.1과의 높은 수준의 호환성 유지 (예 : 메서드 , 상태 코드 , URI 및 대부분의 헤더 필드 포함 ).
다음 을 고려 하여 대기 시간 을 줄여 웹 브라우저의 페이지로드 속도를 향상&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP 헤더 의 데이터 압축&lt;/li&gt;
  &lt;li&gt;HTTP / 2 서버 푸시&lt;/li&gt;
  &lt;li&gt;요청의 파이프 라이닝 (TCP 연결에서 응답을 기다리지 않고 HTTP 요청을 보내는 기술 )&lt;/li&gt;
  &lt;li&gt;HTTP 1.x에서 head-of-line 블로킹(한 줄의 패킷 이 첫 번째 패킷에 고정 될 때 발생하는 성능 제한 현상) 문제 수정&lt;/li&gt;
  &lt;li&gt;다중 TCP의 연결
데스크톱 웹 브라우저, 모바일 웹 브라우저, 웹 API, 다양한 규모의 웹 서버 , 프록시 서버 , 역방향 프록시 서버, 방화벽 및 컨텐츠 전달 네트워크 와 같은 HTTP의 공통된 기존 사용 사례를 지원한다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="etc" /><category term="home" /><summary type="html">웹사이트 성능 과 관련한 글들을 찾아보다가 도메인 샤딩이라는 단어를 발견하였다.</summary></entry></feed>